openapi: 3.0.1
info:
  title: relations
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "1.1"
tags:
  - name: Relation Type
    description: 'CRUD for relation types '
  - name: Relation
    description: Relations between objects
paths:
  /{municipalityId}/relations/{id}:
    get:
      tags:
        - Relation
      summary: Get relation
      description: Get relation with matching id.
      operationId: getRelation
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: id
          in: path
          description: id of relation
          required: true
          schema:
            type: string
          example: b9702590-1a65-4b78-9de5-44e46e25b62c
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Relation"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      tags:
        - Relation
      summary: Save relation
      description: Replace relation by saving new values
      operationId: saveRelation
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: id
          in: path
          description: id of relation
          required: true
          schema:
            type: string
          example: b9702590-1a65-4b78-9de5-44e46e25b62c
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Relation"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Relation"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - Relation
      summary: Delete relation
      description: Deletes relation with matching id
      operationId: deleteRelation
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: id
          in: path
          description: id of relation
          required: true
          schema:
            type: string
          example: b9702590-1a65-4b78-9de5-44e46e25b62c
      responses:
        "204":
          description: Successful operation
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /relation-types/{type}:
    get:
      tags:
        - Relation Type
      summary: Get relation type
      description: Get relation type with RelationType.type as key.
      operationId: getType
      parameters:
        - name: type
          in: path
          description: relation type name
          required: true
          schema:
            type: string
          example: BLOCKS
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationType"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      tags:
        - Relation Type
      summary: Save relation type
      description: Replace relation type by saving new values
      operationId: saveRelationType
      parameters:
        - name: type
          in: path
          description: name of relation type
          required: true
          schema:
            type: string
          example: DUPLICATE
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationType"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationType"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - Relation Type
      summary: Delete relation type
      description: Deletes relation type and possible counterType
      operationId: deleteRelationType
      parameters:
        - name: type
          in: path
          description: name of relation type
          required: true
          schema:
            type: string
          example: DUPLICATE
      responses:
        "204":
          description: Successful operation
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/relations:
    get:
      tags:
        - Relation
      summary: Find matching relations
      description: Query for relations with or without filters.
      operationId: findRelations
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: filter
          in: query
          description: "Syntax description: [spring-filter](https://github.com/turkraft/spring-filter/blob/85730f950a5f8623159cc0eb4d737555f9382bb7/README.md#syntax)"
          required: false
          schema:
            type: string
          example: sourceId:'SUPPORT-CASE-ID' or targetId:'SUPPORT-CASE-ID'
        - name: sortBy
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              description: The properties to sort on
              example: propertyName
        - name: sortDirection
          in: query
          description: The sort order direction
          required: false
          schema:
            $ref: "#/components/schemas/Direction"
          example: ASC
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            minimum: 1
            type: integer
            description: Page number
            format: int32
            example: 1
            default: 1
          example: 1
        - name: limit
          in: query
          description: Result size per page. Maximum allowed value is dynamically configured
          required: false
          schema:
            minimum: 1
            type: integer
            description: Result size per page. Maximum allowed value is dynamically
              configured
            format: int32
            example: 15
          example: 15
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationPagedResponse"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - Relation
      summary: Create relation
      description: Creates a new relation between to objects
      operationId: createRelation
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Relation"
        required: true
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /relation-types:
    get:
      tags:
        - Relation Type
      summary: Get relation types
      description: Get all relation types.
      operationId: getAllTypes
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RelationType"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - Relation Type
      summary: Create type
      description: Creates a new relation type
      operationId: createType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationType"
        required: true
      responses:
        "201":
          description: Successful operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /api-docs:
    get:
      tags:
        - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
components:
  schemas:
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        reasonPhrase:
          type: string
    Relation:
      required:
        - source
        - target
        - type
      type: object
      properties:
        id:
          type: string
          description: Unique id for the relation
          readOnly: true
          example: f4de6b8b-f727-4ed1-9959-b9d5bde1922f
        type:
          minLength: 1
          type: string
          description: Type of relation. Valid types can be fetch via /relation-types
        created:
          type: string
          description: Timestamp when relations was created
          format: date-time
          readOnly: true
          example: 2000-10-31T01:30:00+02:00
        modified:
          type: string
          description: Timestamp when relations was last modified
          format: date-time
          readOnly: true
          example: 2000-10-31T01:30:00+02:00
        source:
          $ref: "#/components/schemas/ResourceIdentifier"
        target:
          $ref: "#/components/schemas/ResourceIdentifier"
      description: Relation between objects
    ResourceIdentifier:
      required:
        - resourceId
        - service
        - type
      type: object
      properties:
        resourceId:
          minLength: 1
          type: string
          description: Unique id for the object
          example: some-id
        type:
          minLength: 1
          type: string
          description: Type of object
          example: case
        service:
          minLength: 1
          type: string
          description: Name of service where object exists
        namespace:
          type: string
          description: Namespace of object
      description: Resource identifier for source and target
    ConstraintViolationProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        type:
          type: string
          format: uri
        status:
          $ref: "#/components/schemas/StatusType"
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        title:
          type: string
        message:
          type: string
        instance:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    ThrowableProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        message:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    RelationType:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: Name of type
          example: DUPLICATES
        displayName:
          type: string
          description: Display value
          example: Duplicates
        counterName:
          type: string
          description: Inverse value of type (if applicable)
          example: IS DUPLICATED BY
        counterDisplayName:
          type: string
          description: Display value
          example: Is duplicated by
      description: Type of relation
    Direction:
      type: string
      description: The sort order direction
      example: ASC
      enum:
        - ASC
        - DESC
    PagingAndSortingMetaData:
      type: object
      properties:
        page:
          type: integer
          description: Current page
          format: int32
          readOnly: true
          example: 5
        limit:
          type: integer
          description: Displayed objects per page
          format: int32
          readOnly: true
          example: 20
        count:
          type: integer
          description: Displayed objects on current page
          format: int32
          readOnly: true
          example: 13
        totalRecords:
          type: integer
          description: Total amount of hits based on provided search parameters
          format: int64
          readOnly: true
          example: 98
        totalPages:
          type: integer
          description: Total amount of pages based on provided search parameters
          format: int32
          readOnly: true
          example: 23
        sortBy:
          type: array
          readOnly: true
          items:
            type: string
            description: The properties to sort by
            readOnly: true
            example: property
        sortDirection:
          $ref: "#/components/schemas/Direction"
      description: PagingAndSortingMetaData model
      readOnly: true
    RelationPagedResponse:
      type: object
      properties:
        relations:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Relation"
        _meta:
          $ref: "#/components/schemas/PagingAndSortingMetaData"
      description: Paged relation response
  securitySchemes: {}
